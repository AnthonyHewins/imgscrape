// Code generated by "enumer -type quality -trimprefix quality"; DO NOT EDIT.

package iiif

import (
	"fmt"
	"strings"
)

const _qualityName = "DefaultColorGrayBitonal"

var _qualityIndex = [...]uint8{0, 7, 12, 16, 23}

const _qualityLowerName = "defaultcolorgraybitonal"

func (i quality) String() string {
	if i >= quality(len(_qualityIndex)-1) {
		return fmt.Sprintf("quality(%d)", i)
	}
	return _qualityName[_qualityIndex[i]:_qualityIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _qualityNoOp() {
	var x [1]struct{}
	_ = x[qualityDefault-(0)]
	_ = x[qualityColor-(1)]
	_ = x[qualityGray-(2)]
	_ = x[qualityBitonal-(3)]
}

var _qualityValues = []quality{qualityDefault, qualityColor, qualityGray, qualityBitonal}

var _qualityNameToValueMap = map[string]quality{
	_qualityName[0:7]:        qualityDefault,
	_qualityLowerName[0:7]:   qualityDefault,
	_qualityName[7:12]:       qualityColor,
	_qualityLowerName[7:12]:  qualityColor,
	_qualityName[12:16]:      qualityGray,
	_qualityLowerName[12:16]: qualityGray,
	_qualityName[16:23]:      qualityBitonal,
	_qualityLowerName[16:23]: qualityBitonal,
}

var _qualityNames = []string{
	_qualityName[0:7],
	_qualityName[7:12],
	_qualityName[12:16],
	_qualityName[16:23],
}

// qualityString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func qualityString(s string) (quality, error) {
	if val, ok := _qualityNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _qualityNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to quality values", s)
}

// qualityValues returns all values of the enum
func qualityValues() []quality {
	return _qualityValues
}

// qualityStrings returns a slice of all String values of the enum
func qualityStrings() []string {
	strs := make([]string, len(_qualityNames))
	copy(strs, _qualityNames)
	return strs
}

// IsAquality returns "true" if the value is listed in the enum definition. "false" otherwise
func (i quality) IsAquality() bool {
	for _, v := range _qualityValues {
		if i == v {
			return true
		}
	}
	return false
}
